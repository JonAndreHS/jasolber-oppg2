# This is a basic workflow to help validate your Terraform configuration

name: Validate core infrastructure

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events
  push:
    branches-ignore:
      - 'main'
    paths:
      - 'modules/networking/**'
      - 'modules/storage/**'
      - 'core_infrastructure/**'

  workflow_dispatch:
      
env:
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  WORKING_DIR: ./core_infrastructure
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  networking_validation:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    env: 
      WORKING_DIR: ./modules/networking
      
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      # Runs a single command using the runners shell
      - name: Terraform init
        id: init
        run: terraform init
        working-directory: ${{ env.WORKING_DIR }} 

      - name: Terraform fmt
        id: fmt
        run: terraform fmt
        working-directory: ${{ env.WORKING_DIR }} 

      - name: Terraform validate
        id: validate
        run: terraform validate
        working-directory: ${{ env.WORKING_DIR }}
        
  storage_validation:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    env: 
      WORKING_DIR: ./modules/storage
      
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      # Runs a single command using the runners shell
      - name: Terraform init
        id: init
        run: terraform init
        working-directory: ${{ env.WORKING_DIR }} 

      - name: Terraform fmt
        id: fmt
        run: terraform fmt
        working-directory: ${{ env.WORKING_DIR }} 

      - name: Terraform validate
        id: validate
        run: terraform validate
        working-directory: ${{ env.WORKING_DIR }}
        
  core_infrastructure_validation:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    env: 
      WORKING_DIR: ./core_infrastructure
      
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      # Runs a single command using the runners shell
      - name: Terraform init
        id: init
        run: terraform init
        working-directory: ${{ env.WORKING_DIR }} 

      - name: Terraform fmt
        id: fmt
        run: terraform fmt
        working-directory: ${{ env.WORKING_DIR }} 

      - name: Terraform validate
        id: validate
        run: terraform validate
        working-directory: ${{ env.WORKING_DIR }}
        
      - name: tfsec
        # You may pin to the exact commit or the version.
        # uses: aquasecurity/tfsec-action@b466648d6e39e7c75324f25d83891162a721f2d6
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          # Directory to run the action on, from the repo root. Default is . (root of the repository)
          working_directory: ${{ env.WORKING_DIR }}
          github_token: ${{ env.GITHUB_TOKEN }}
        # Space separated args specified here will be added during tfsec execution.
        # (eg. --force-all-dirs --verbose)
